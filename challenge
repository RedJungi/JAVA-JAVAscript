// 자바 기초, 자바 기본 문법 마스터하기


// 클래스 선언
public class MyClass {
    // 변수 선언
    int num1;
    Message msg;

    // 메서드
    public void printName(String name) {
        ...
    }

    // 메서드
    public Message getMessage() {
        ...
    }

    // 메인 메서드
    public static void main(String[] args) {
        // 클래스 인스턴스 생성
        MyClass mc = new MyClass();
        ...
    }
}

클래스(class)
객체지향 프로그램의 기본 구조로 자바에서 모든 프로그램 소스는 클래스 단위로 시작하게 된다.
// 프로그램 소스는 .java 파일이고 컴파일된 결과는 .class 가 된다.
// 알번적으로 클래스 이름과 소스파일명은 동일함.
// 대부분의 경우 프로그램은 여러 클래스로 구성되며 실행을 위해서는 main() 메서드가 필요함.

인스턴스(instance)
클래스로 부터 생성된 객체로 클래스는 객체를 정의한 틀이고 실제 프로그램은 인스턴스를 통해 동작하게된다.
// main() 메서드는 단지 프로그램을 실행하는 진입점이고 실제 클래스를 사용하려면 new() 연산을 통해 인스턴스를 생성해야한다.
// main() 에서 클래스부에 선언된 변수(멤버)를 접근할 수 없으며 인스턴스를 통해 사용해야함(인스턴스 변수).
// 인스턴스에서 변수와 메서드 사용은 인스턴스명.변수명 , 인스턴스명,메서드명 과 같은 형식으로 사용.

변수는 데이터를 저장하기 위한 메모리 공간에 대한 이름으로 저장할 데이터의 크기를 알아야 필요한 공간을 확보할 수 있습니다. 따라서 적절한 자료형을 사용하는 것은 매우 중요합니다.
다만 객체지향 프로그램 언어에서는 클래스 타입을 자료형으로 사용할 수 있으며 최근에 나오는 언어들의 경우 메모리 공간의 크기를 계산하기 위한 용도라기 보다는 타입을 구분하는 개념으로 접근하고 있습니다. 
나아가 타입에 대한 추론을 통해 개발자가 타입에 신경쓰지 않고 코딩을 할 수 있도록 지원하고 있습니다.
자바의 경우 원시 자료형(Primitive Type)과 클래스 타입(Class Type)을 모두 지원 하고 있으며 원시 자료형에 대한 클래스 타입들은 랩퍼 클래스(Wrapper Class)라고 합니다.

[접근제어자] 타입 변수명

int num1 = 10;      // 원시자료형 정수 타입
String msg = "Hello";   // 객체타입 문자열 타입
Member member = new Member();   // 객체타입 Member 클래스 타입

접근제어자: 변수의 접근범위를 지정
타입: 자료형으로 자바는 명시적으로 타입을 지정해야 함.
자료형에는 원시자료형과 객체형이 있으며 객체타입의 변수는 참조변수라고 함.
객체지향에서는 클래스부에 선언된 변수는 필드 혹은 멤버 변수라고 함.

[연산자]는 프로그램에서 변수의 값들을 계산하기 위해 사용 한다.
사칙연산, 대입연산, 비트연산, 논리연산, 관계연산 등이 있다.

조건문
(if문)
// if, else if
if(power < 10) {
    slowdown();
}
else if((power > 100) && (time <= 50) {
    gofaster();
}
else {
    go();
}

(switch문)
switch(입력 변수) {
    case 조건값: 실행 구문;break;
    ..
    default: 기본 실행 구문;
}
